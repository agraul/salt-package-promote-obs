#!/usr/bin/env groovy

// Configure the build properties
properties([
    buildDiscarder(logRotator(numToKeepStr: '20')),
    disableConcurrentBuilds(),
])

pipeline {

    parameters {
        string(defaultValue: '3000', description: 'Salt version', name: 'salt_version')
        string(defaultValue: '', description: 'Maintenance Update version (i.a. 4.0.5)', name: 'mu_version')
    }

    agent { label 'manager-jenkins-node' }

    stages {
        stage('Previous checks') {
            steps {
                echo "Check if 'openSUSE-MU-${mu_version}' branch exists at https://github.com/openSUSE/salt"
                sh "curl -I --fail https://codeload.github.com/openSUSE/salt/tar.gz/openSUSE-MU-${mu_version}"

                echo "Check if 'MU-${mu_version}' branch exists at https://github.com/openSUSE/salt-packaging"
                sh "curl -I --fail https://codeload.github.com/openSUSE/salt-packaging/tar.gz/MU-${mu_version}"

                echo "Check that 'products:testing', 'products:testing:debian', 'products:testing:debian:python2' and 'products:testing:debian:python3' are not set to MU branches"
                sh "! curl https://build.opensuse.org/package/view_file/systemsmanagement:saltstack:products:testing/salt/_service?expand=1 | grep MU-${mu_version}"
                sh "! curl https://build.opensuse.org/package/view_file/systemsmanagement:saltstack:products:testing:debian/salt/_service?expand=1 | grep MU-${mu_version}"
                sh "! curl https://build.opensuse.org/package/view_file/systemsmanagement:saltstack:products:testing:debian:python2/salt/_service?expand=1 | grep MU-${mu_version}"
                sh "! curl https://build.opensuse.org/package/view_file/systemsmanagement:saltstack:products:testing:debian:python3/salt/_service?expand=1 | grep MU-${mu_version}"

                echo "Check the source tarball is properly named to salt_${salt_version}.orig.tar.gz in 'products:testing:debian', 'products:testing:debian:python2' and 'products:testing:debian:python3'"
                sh "curl https://build.opensuse.org/package/view_file/systemsmanagement:saltstack:products:testing:debian/salt/_service?expand=1 | grep salt_${salt_version}.orig.tar.g"
                sh "curl https://build.opensuse.org/package/view_file/systemsmanagement:saltstack:products:testing:debian:python2/salt/_service?expand=1 | grep salt_${salt_version}.orig.tar.g"
                sh "curl https://build.opensuse.org/package/view_file/systemsmanagement:saltstack:products:testing:debian:python3/salt/_service?expand=1 | grep salt_${salt_version}.orig.tar.gz"
            }
        }

        stage('Create temporary OBS environment') {
            steps {
                sh "mkdir /tmp/salt-promote-pipeline-env || true"
            }
        }

        stage('Promote Salt testing RPM packages') {
            steps {
                echo 'Promote Salt testing packages from "products:testing" to "products"'
                sh "osc copypac systemsmanagement:saltstack:products:testing salt systemsmanagement:saltstack:products"
                sh "osc copypac systemsmanagement:saltstack:products:testing py26-compat-salt systemsmanagement:saltstack:products"
                sh "osc copypac systemsmanagement:saltstack:products:testing py26-compat-tornado systemsmanagement:saltstack:products"
                sh "osc copypac systemsmanagement:saltstack:products:testing py26-compat-msgpack-python systemsmanagement:saltstack:products"
                sh "osc copypac systemsmanagement:saltstack:products:old:testing salt systemsmanagement:saltstack:products:old"
            }
        }

        stage('Promote Salt testing DEB packages') {
            steps {
			    dir('/tmp/salt-promote-pipeline-env') {
					echo 'Disable services in "products:testing:debian"'
					sh "osc co systemsmanagement:saltstack:products:testing:debian salt"
			        dir('/tmp/salt-promote-pipeline-env/systemsmanagement:saltstack:products:testing:debian/salt') {
						sh "cp _service _service.backup"
						sh "sed -i 's/name=\"download_url\">/name=\"download_url\" mode=\"disabled\">/g' _service"

						echo 'Execute disabled services to ensure tarball is updated in "products:testing:debian"'
						sh "osc service disabledrun || true"
						sh "osc add salt_${salt_version}.orig.tar.gz"
						sh "osc commit -m 'Disable services and temporary add tarball before promoting'"

						echo 'Promote "products:testing:debian" package'
						sh "osc copypac systemsmanagement:saltstack:products:testing:debian salt systemsmanagement:saltstack:products:debian"

						echo 'Re-enable services in "products:testing:debian"'
						sh "cp _service.backup _service"
						sh "osc rm salt_${salt_version}.orig.tar.gz"
						sh "osc commit -m 'Remove tarball and disable service after promoting'"
					}
					sh "rm systemsmanagement:saltstack:products:testing:debian/salt -rf"

					echo 'Disable services in "products:testing:debian:python2"'
					sh "osc co systemsmanagement:saltstack:products:testing:debian:python2 salt"
			        dir('/tmp/salt-promote-pipeline-env/systemsmanagement:saltstack:products:testing:debian:python2/salt') {
						sh "cp _service _service.backup"
						sh "sed -i 's/name=\"download_url\">/name=\"download_url\" mode=\"disabled\">/g' _service"

						echo 'Execute disabled services to ensure tarball is updated in "products:testing:debian:python2"'
						sh "osc service disabledrun || true"
						sh "osc add salt_${salt_version}.orig.tar.gz"
						sh "osc commit -m 'Disable services and temporary add tarball before promoting'"

						echo 'Promote "products:testing:debian:python2" package'
						sh "osc copypac systemsmanagement:saltstack:products:testing:debian:python2 salt systemsmanagement:saltstack:products:debian:python2"

						echo 'Re-enable services in "products:testing:debian:python2"'
						sh "cp _service.backup _service"
						sh "osc rm salt_${salt_version}.orig.tar.gz"
						sh "osc commit -m 'Remove tarball and disable service after promoting'"
					}
					sh "rm systemsmanagement:saltstack:products:testing:debian:python2/salt -rf"

					echo 'Disable services in "products:testing:debian:python3"'
					sh "osc co systemsmanagement:saltstack:products:testing:debian:python3 salt"
			        dir('/tmp/salt-promote-pipeline-env/systemsmanagement:saltstack:products:testing:debian:python3/salt') {
						sh "cp _service _service.backup"
						sh "sed -i 's/name=\"download_url\">/name=\"download_url\" mode=\"disabled\">/g' _service"

						echo 'Execute disabled services to ensure tarball is updated in "products:testing:debian:python3"'
						sh "osc service disabledrun || true"
						sh "osc add salt_${salt_version}.orig.tar.gz"
						sh "osc commit -m 'Disable services and temporary add tarball before promoting'"

						echo 'Promote "products:testing:debian:python3" package'
						sh "osc copypac systemsmanagement:saltstack:products:testing:debian:python3 salt systemsmanagement:saltstack:products:debian:python3"

						echo 'Re-enable services in "products:testing:debian:python3"'
						sh "cp _service.backup _service"
						sh "osc rm salt_${salt_version}.orig.tar.gz"
						sh "osc commit -m 'Remove tarball and disable service after promoting'"
					}
					sh "rm systemsmanagement:saltstack:products:testing:debian:python3/salt -rf"
				}
            }
        }
    }

	post {
		always {
			echo 'Fix package link at promoted "products:debian" package'
			sh "osc linkpac systemsmanagement:saltstack:products salt systemsmanagement:saltstack:products:debian -f"
			echo 'Fix package link at promoted "products:debian:python2" package'
			sh "osc linkpac systemsmanagement:saltstack:products salt systemsmanagement:saltstack:products:debian:python2 -f"
			echo 'Fix package link at promoted "products:debian:python3" package'
			sh "osc linkpac systemsmanagement:saltstack:products salt systemsmanagement:saltstack:products:debian:python3 -f"
			echo 'Remove OBS environment at /tmp/salt-promote-pipeline-env'
			sh "rm /tmp/salt-promote-pipeline-env -rf || true"
		}
    }

}
